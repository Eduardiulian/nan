<style>
	.border {
		padding: 16px;
	}
	.msg {
		word-wrap: break-word;
		width: 300px;
		align-self: flex-end;

	}
	td {
		align-content: flex-end;
	}
	#msgFeed {
		border: 0px;
		width: 100%;
	}
	#dialog {
		height: 400px;
		overflow-y: scroll;
	}
	#sendRegion {
		margin-top: 16px;
	}
</style>





<div class="row justify-content-center" id="dialogRow">
	<div class="col-8" >
		<!-- <h1 align="center">Chat</h1> -->

		<div id="dialog" class="border rounded">
			
		</div>




		<div class="border rounded" id="sendRegion">

			<%= form_for :message, url: "/messages/?reciever=#{params[:target_email]}",
			:method => "post",
			:remote => true, :id => "inputForm" do |form|%>

<!-- <div class="field">
    <%= form.label 'sender' %>
    <%= form.text_field 'sender' %>
</div> -->

<div class="field row">

	<div class="col-10">
		<%= form.text_field('text', :class => "form-control col-auto", 
		:placeholder => "message...", :id => "msgText") %>
	</div>

	<div class="col-1">
		<%= form.submit("send", :class => "btn btn-primary col-auto", :onclick => "sendMsgJs()") %>
	</div>


<!--   <div class="field">
    <%= form.label 'accepted' %>
    <%= form.check_box 'accepted' %>
</div> -->

<% end %>

</div>



</div>
</div>
</div>







<script>
	// ===========================================================

	function sleep(ms) {
		ms += new Date().getTime();
		while (new Date() < ms){}
	} 

async function sendMsgJs(){
	console.log('send pressed')
	form = document.getElementsByTagName("form")[0];
	//	form.submit();
	//	async() => {
	//	sleep(3000);
	//	form.reset();
	//}
	//	form.value = "";
}



function renderSideMsg(text){
	s = "<tr><td>" +
	"<h5><div class=\"border msg rounded\">" + text + "</div></h5>" + 
	"</td><td></td></tr>"
	return s
}

function renderUserMsg(text){
	s = "<tr><td></td><td>" +
	"<div class=\"border msg rounded\"><h5>" + text + "</h5></div>" + 
	"</td></tr>"
	return s
}


function getParameterByName(name, url = window.location.href) {
	name = name.replace(/[\[\]]/g, '\\$&');
	var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
	results = regex.exec(url);
	if (!results) return null;
	if (!results[2]) return '';
	return decodeURIComponent(results[2].replace(/\+/g, ' '));
}
var email = getParameterByName('target_email');
console.log(email)




handleAjaxSuccess = function (data, user) {
	console.log("ajax success")
	console.log(data.type)
		//[data, status, xhr] = event.detail;
		var result = document.getElementById("dialog");
	//document.write("~tick")
	msgBlock = ""
	data.forEach(function (item, i, arr) {
      	//result.innerHTML += item.sender
      	console.log("sender: " + item.sender)
      	if(item.sender == email){
      		msgBlock += renderSideMsg(item.text)
      	}else{
      		msgBlock += renderUserMsg(item.text)
      	}
      });
	result.innerHTML = "<table class=\"table-borderless\" id=\"msgFeed\">" + msgBlock + "</table>"
}

const request = new XMLHttpRequest();


console.log("try init request")
const url = "/chats/refresh.json?target_email=" + email;
request.open('GET', url); 
request.setRequestHeader('Content-Type', 'application/json');
request.send();


setInterval(function() {

	console.log("try request")
	const url = "/chats/refresh.json?target_email=" + email;
	request.open('GET', url); 
	request.setRequestHeader('Content-Type', 'application/json');
	request.send();

}, 5000);

request.addEventListener("readystatechange", () => {
	console.log("state change");
	if (request.readyState === 4 && request.status === 200) {

      // выводим в консоль то что ответил сервер
      console.log("200/4 response");
      console.log(JSON.parse(request.responseText));
      data = JSON.parse(request.responseText);
      handleAjaxSuccess(data, email);

  }
});
	// if (data.type == "Array") {
	// 	s = "<table><tr><td>sequence</td><td>size</td></tr>"

	// 	let max = [];
	// 	data.value.forEach(function (item, i, arr) {
	// 		if (item.length > max.length) {
	// 			max = item
	// 		}
	// 		if (item.length > 0) {
	// 			s += "<tr><td>" + item + "</td><td>" + item.length + "</td></tr>";
	// 		}
	// 	});

	// 	s += "<tr><td>longest part</td><td>size</td></tr>"
	// 	s += "<tr><td>" + max + "</td><td>" + max.length + "</td></tr>"
	// } else {
	// 	s = data.value
	// 	switch (s[s.length-1].charCodeAt(0) - "0".charCodeAt(0)) {
	// 		case 1:
	// 			s = "nil input";
	// 			break;
	// 		case 2:
	// 			s = "incorrect input";
	// 			break;
	// 		case 3:
	// 			s = "no such sequences to output";
	// 			break;
	// 		default:
	// 			s = "unknown error "
	// 	}


	// }


	// result.innerHTML = "<hr/>(myScript) Result is: " + s +
	// 	"<p>" + "</p>";
</script>
